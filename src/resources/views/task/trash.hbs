<div class="trash-header">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div class="header-info">
                    <h1>
                        <i class="bi bi-trash"></i>
                        Trash
                    </h1>
                </div>
                <div class="header-actions">
                    <a href="/task" class="btn btn-outline-primary me-2">
                        <i class="bi bi-arrow-left"></i>
                        <span>Back</span>
                    </a>
                    {{#if (hasDeletedTasks deletedTasks)}}
                    <button class="btn btn-outline-danger" id="emptyTrashBtn">
                        <i class="bi bi-trash"></i>
                        <span>Empty Trash</span>
                    </button>
                    {{/if}}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bulk Actions Bar (hidden by default) -->
<div class="bulk-actions-bar" id="bulkActionsBar" style="display: none;">
    <div class="d-flex justify-content-between align-items-center">
        <div class="selected-count">
            <span id="selectedCount">0</span> task(s) selected
        </div>
        <div class="bulk-actions">
            <button class="btn btn-outline-success btn-sm" id="bulkRestoreBtn">
                <i class="bi bi-arrow-clockwise"></i>
                <span>Restore Selected</span>
            </button>
            <button class="btn btn-outline-danger btn-sm" id="bulkDeleteBtn">
                <i class="bi bi-trash"></i>
                <span>Delete Selected</span>
            </button>
            <button class="btn btn-outline-secondary btn-sm" id="clearSelectionBtn">
                <i class="bi bi-x-circle"></i>
                <span>Clear Selection</span>
            </button>
        </div>
    </div>
</div>

<div class="deleted-section-wrapper task-section">
    <div class="section-header">
        <div class="d-flex justify-content-between align-items-center">
            <h3 class="section-title">
                <i class="bi bi-trash text-muted"></i>
                Deleted Tasks
                <span class="task-count">{{countDeletedTasks deletedTasks}}</span>
            </h3>
            {{#if (hasDeletedTasks deletedTasks)}}
            <div class="section-controls">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="selectAllTasks">
                    <label class="form-check-label" for="selectAllTasks">
                        Select All
                    </label>
                </div>
            </div>
            {{/if}}
        </div>
    </div>
    {{#if (hasDeletedTasks deletedTasks)}}
        <div class="deleted-section">
            <div class="task-list">
                {{#each deletedTasks}}
                {{#if deleted_at}}
                <div class="task-item deleted" data-task-id="{{id}}">
                    <div class="task-selection">
                        <div class="form-check">
                            <input class="form-check-input task-checkbox" type="checkbox" id="task-{{id}}" value="{{id}}">
                        </div>
                    </div>
                    <div class="task-content">
                        <div class="task-header">
                            <div class="task-title-section">
                                <div class="task-status-icon">
                                    <i class="bi bi-trash text-muted"></i>
                                </div>
                                <div class="task-info">
                                    <h5 class="task-title text-muted">{{title}}</h5>
                                    {{#if description}}
                                    <p class="task-description text-muted">{{truncate description 60}}</p>
                                    {{/if}}
                                </div>
                            </div>

                            <div class="task-meta-section">
                                <!-- Due Date/Time -->
                                {{#if due_datetime}}
                                <div class="due-date-info deleted">
                                    <div class="due-date-badge">
                                        <i class="bi bi-clock"></i>
                                        <div class="due-details">
                                            <span class="due-date-text">{{formatDate due_datetime}}</span>
                                            <span class="due-time-text">{{formatTime due_datetime}}</span>
                                        </div>
                                    </div>
                                </div>
                                {{/if}}
                            </div>
                        </div>

                        <!-- Task Actions -->
                        <div class="task-actions" onclick="event.stopPropagation()">
                            <form action="/task/deleted/{{id}}/restore?_method=PUT" method="POST" class="d-inline">
                                <button type="submit" class="btn btn-sm btn-outline-success" title="Restore">
                                    <i class="bi bi-arrow-clockwise"></i>
                                    <span class="ms-1">Restore</span>
                                </button>
                            </form>
                            <button class="btn btn-sm btn-outline-danger permanent-delete-task-btn" title="Delete Permanent"
                                data-task-id="{{id}}" data-task-title="{{title}}">
                                <i class="bi bi-trash"></i>
                                <span class="ms-1">Delete Permanent</span>
                            </button>
                        </div>
                    </div>
                </div>
                {{/if}}
                {{/each}}
            </div>
        </div>
    {{else}}
        <div class="empty-state">
            <h4>Trash is empty</h4>
            <p>No deleted tasks found.</p>
        </div>
    {{/if}}
</div>

<!-- Permanent Delete Confirmation Modal -->
<div class="modal fade" id="permanentDeleteConfirmModal" tabindex="-1"
    aria-labelledby="permanentDeleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="permanentDeleteConfirmModalLabel">
                    <i class="bi bi-exclamation-triangle text-danger"></i>
                    Delete Permanent
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>This action cannot be undone!</strong></p>
                <p>Are you sure you want to permanently delete this task?</p>
                <div class="task-preview">
                    <strong id="permanentDeleteTaskTitlePreview"></strong>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle"></i>
                    <span>Cancel</span>
                </button>
                <button type="button" class="btn btn-outline-danger" id="confirmPermanentDeleteBtn">
                    <i class="bi bi-trash"></i>
                    <span>Delete Permanent</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Empty Trash Confirmation Modal -->
<div class="modal fade" id="emptyTrashConfirmModal" tabindex="-1" aria-labelledby="emptyTrashConfirmModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="emptyTrashConfirmModalLabel">
                    <i class="bi bi-exclamation-triangle text-danger"></i>
                    Empty Trash
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>This action cannot be undone!</strong></p>
                <p>Are you sure you want to permanently delete all tasks in trash?</p>
                <p class="text-muted">{{countDeletedTasks deletedTasks}} tasks will be permanently deleted.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle"></i>
                    <span>Cancel</span>
                </button>
                <button type="button" class="btn btn-outline-danger" id="confirmEmptyTrashBtn">
                    <i class="bi bi-trash"></i>
                    <span>Empty Trash</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Bulk Delete Confirmation Modal -->
<div class="modal fade" id="bulkDeleteConfirmModal" tabindex="-1" aria-labelledby="bulkDeleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bulkDeleteConfirmModalLabel">
                    <i class="bi bi-exclamation-triangle text-danger"></i>
                    Delete Selected Tasks
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>This action cannot be undone!</strong></p>
                <p>Are you sure you want to permanently delete the selected tasks?</p>
                <div class="selected-tasks-preview">
                    <ul id="deleteSelectedTasksList" class="list-unstyled">
                        <!-- Selected tasks will be dynamically populated -->
                    </ul>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle"></i>
                    <span>Cancel</span>
                </button>
                <button type="button" class="btn btn-outline-danger" id="confirmBulkDeleteBtn">
                    <i class="bi bi-trash"></i>
                    <span>Delete Selected</span>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const urlParams = new URLSearchParams(window.location.search);
    // Selection functionality
    const taskCheckboxes = document.querySelectorAll('.task-checkbox');
    const selectAllCheckbox = document.getElementById('selectAllTasks');
    const bulkActionsBar = document.getElementById('bulkActionsBar');
    const selectedCount = document.getElementById('selectedCount');
    const bulkRestoreBtn = document.getElementById('bulkRestoreBtn');
    const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
    const clearSelectionBtn = document.getElementById('clearSelectionBtn');
    
    // Bulk action modals
    const bulkDeleteModal = new bootstrap.Modal(document.getElementById("bulkDeleteConfirmModal"));
    const deleteSelectedTasksList = document.getElementById('deleteSelectedTasksList');
    const confirmBulkRestoreBtn = document.getElementById('confirmBulkRestoreBtn');
    const confirmBulkDeleteBtn = document.getElementById('confirmBulkDeleteBtn');
    
    let selectedTasks = [];

    // Individual task checkbox change
    taskCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const taskId = this.value;
            
            if (this.checked) {
                if (!selectedTasks.includes(taskId)) {
                    selectedTasks.push(taskId);
                }
            } else {
                selectedTasks = selectedTasks.filter(id => id !== taskId);
            }
            
            updateBulkActionsVisibility();
            updateSelectAllCheckbox();
        });
    });

    // Select all checkbox change
    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', function() {
            taskCheckboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
                
                const taskId = checkbox.value;
                if (this.checked) {
                    if (!selectedTasks.includes(taskId)) {
                        selectedTasks.push(taskId);
                    }
                } else {
                    selectedTasks = selectedTasks.filter(id => id !== taskId);
                }
            });
            
            updateBulkActionsVisibility();
        });
    }

    function updateSelectAllCheckbox() {
        if (!selectAllCheckbox) return;
        
        const checkedCheckboxes = document.querySelectorAll('.task-checkbox:checked');
        
        if (checkedCheckboxes.length === 0) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = false;
        } else if (checkedCheckboxes.length === taskCheckboxes.length) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = true;
        } else {
            selectAllCheckbox.indeterminate = true;
            selectAllCheckbox.checked = false;
        }
    }

    function updateBulkActionsVisibility() {
        if (selectedTasks.length > 0) {
            bulkActionsBar.style.display = 'block';
            selectedCount.textContent = selectedTasks.length;
        } else {
            bulkActionsBar.style.display = 'none';
        }
    }

    // Bulk restore
    bulkRestoreBtn.addEventListener('click', function() {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/task/deleted/bulk/bulk-restore?_method=PUT';
        form.style.display = 'none';
        
        selectedTasks.forEach(taskId => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'taskIds[]';
            input.value = taskId;
            form.appendChild(input);
        });
        
        document.body.appendChild(form);
        form.submit();
    });

    const bulkRestoreSuccess = urlParams.get("bulk-restore-success");
    const bulkRestoreError = urlParams.get("bulk-restore-error");
    if (bulkRestoreSuccess) {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: `${bulkRestoreSuccess} task(s) restored successfully.`,
            confirmButtonText: 'Done',
            confirmButtonColor: '#198754',
        }).then(() => {
            window.location.href = '/task/deleted/trash';
        });
    } else if (bulkRestoreError) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: bulkRestoreError,
            confirmButtonText: 'OK',
            confirmButtonColor: '#dc3545',
        });
    }

    // Bulk delete
    const bulkDeleteSuccess = urlParams.get("bulk-permanent-delete-success");
    const bulkDeleteError = urlParams.get("bulk-permanent-delete-error");

    bulkDeleteBtn.addEventListener('click', function() {
        showBulkDeleteModal();
    });

    function showBulkDeleteModal() {
        deleteSelectedTasksList.innerHTML = '';
        
        selectedTasks.forEach(taskId => {
            const taskElement = document.querySelector(`.task-item[data-task-id="${taskId}"]`);
            if (taskElement) {
                const taskTitle = taskElement.querySelector('.task-title').textContent;
                const listItem = document.createElement('li');
                listItem.className = 'mb-1';
                listItem.innerHTML = `<i class="bi bi-dot"></i> ${taskTitle}`;
                deleteSelectedTasksList.appendChild(listItem);
            }
        });
        
        bulkDeleteModal.show();
    }

    confirmBulkDeleteBtn.addEventListener('click', function() {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/task/deleted/bulk/bulk-permanent-delete?_method=DELETE';
        form.style.display = 'none';
        
        selectedTasks.forEach(taskId => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'taskIds[]';
            input.value = taskId;
            form.appendChild(input);
        });
        
        document.body.appendChild(form);
        form.submit();
    });

    if (bulkDeleteSuccess) {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: `${bulkDeleteSuccess} task(s) permanently deleted.`,
            confirmButtonText: 'Done',
            confirmButtonColor: '#198754',
        }).then(() => {
            window.location.href = '/task/deleted/trash';
        });
    } else if (bulkDeleteError) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: bulkDeleteError,
            confirmButtonText: 'OK',
            confirmButtonColor: '#dc3545',
        });
    }

    // Clear selection
    clearSelectionBtn.addEventListener('click', function() {
        selectedTasks = [];
        taskCheckboxes.forEach(checkbox => checkbox.checked = false);
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
        }
        updateBulkActionsVisibility();
    });

    // Restore success message
    const restoredSuccess = urlParams.get("restored-success");
    if (restoredSuccess) {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'The task has been successfully restored.',
            confirmButtonText: 'Done',
            confirmButtonColor: '#198754',
        }).then(() => {
            window.location.href = '/task/deleted/trash';
        });
    }

    // Permanent delete functionality
    const permanentDeleteButtons = document.querySelectorAll(".permanent-delete-task-btn");
    const permanentDeleteModal = new bootstrap.Modal(document.getElementById("permanentDeleteConfirmModal"));
    const permanentDeleteTaskTitlePreview = document.getElementById("permanentDeleteTaskTitlePreview");
    const confirmPermanentDeleteBtn = document.getElementById("confirmPermanentDeleteBtn");
    const deletedError = urlParams.get("deleted-error");
    const deletedSuccess = urlParams.get("deleted-success");

    let taskToPermanentDelete = null;

    permanentDeleteButtons.forEach(button => {
        button.addEventListener("click", function (e) {
            e.stopPropagation();

            const taskId = this.getAttribute("data-task-id");
            const taskTitle = this.getAttribute("data-task-title");

            taskToPermanentDelete = taskId;
            permanentDeleteTaskTitlePreview.textContent = taskTitle;

            permanentDeleteModal.show();
        });
    });

    confirmPermanentDeleteBtn.addEventListener("click", function () {
        if (taskToPermanentDelete) {
            const form = document.createElement("form");
            form.method = "POST";
            form.action = `/task/deleted/${taskToPermanentDelete}/delete?_method=DELETE`;
            form.style.display = "none";
            document.body.appendChild(form);
            form.submit();
        }
    });

    if (deletedSuccess) {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'The task has been permanently deleted.',
            confirmButtonText: 'Done',
            confirmButtonColor: '#198754',
        }).then(() => {
            window.location.href = '/task/deleted/trash';
        });
    } else if (deletedError) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: deletedError,
            confirmButtonText: 'OK',
            confirmButtonColor: '#dc3545',
        });
    }

    // Empty trash functionality
    const emptyTrashBtn = document.getElementById("emptyTrashBtn");
    const emptyTrashModal = new bootstrap.Modal(document.getElementById("emptyTrashConfirmModal"));
    const confirmEmptyTrashBtn = document.getElementById("confirmEmptyTrashBtn");
    const emptyTrashError = urlParams.get("empty-trash-error");
    const emptyTrashSuccess = urlParams.get("empty-trash-success");

    if (emptyTrashBtn) {
        emptyTrashBtn.addEventListener("click", function () {
            emptyTrashModal.show();
        });
    }

    confirmEmptyTrashBtn.addEventListener("click", function () {
        const form = document.createElement("form");
        form.method = "POST";
        form.action = "/task/deleted/empty-trash?_method=DELETE";
        form.style.display = "none";
        document.body.appendChild(form);
        form.submit();
    });

    if (emptyTrashSuccess) {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'All tasks in trash have been permanently deleted.',
            confirmButtonText: 'Done',
            confirmButtonColor: '#198754',
        }).then(() => {
            window.location.href = '/task/deleted/trash';
        });
    } else if (emptyTrashError) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: emptyTrashError,
            confirmButtonText: 'OK',
            confirmButtonColor: '#dc3545',
        });
    }

    // Reset modals when closed
    document.getElementById("permanentDeleteConfirmModal").addEventListener("hidden.bs.modal", function () {
        taskToPermanentDelete = null;
        permanentDeleteTaskTitlePreview.textContent = "";
    });
});
</script>